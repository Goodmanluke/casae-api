#!/usr/bin/env python3\n\"\"\"\nQuick test to verify the RentCast AVM improvements are working correctly.\nThis will test a real address to ensure the variable scoping issue is fixed.\n\"\"\"\n\nimport asyncio\nimport os\nimport httpx\nfrom datetime import datetime\n\nasync def test_cma_baseline():\n    \"\"\"Test the enhanced CMA baseline functionality\"\"\"\n    \n    BASE_URL = \"http://localhost:8000\"\n    TEST_ADDRESS = \"2210 2nd Ave Se, Altoona, IA, 50009\"\n    \n    print(\"🧪 Testing CMA Baseline with RentCast AVM\")\n    print(\"=\" * 50)\n    print(f\"Base URL: {BASE_URL}\")\n    print(f\"Test Address: {TEST_ADDRESS}\")\n    print(f\"Timestamp: {datetime.now()}\")\n    print()\n    \n    # Check environment\n    if os.getenv(\"RENTCAST_API_KEY\"):\n        print(\"✅ RENTCAST_API_KEY found\")\n    else:\n        print(\"⚠️  RENTCAST_API_KEY not found\")\n    \n    if os.getenv(\"RENTCAST_USE_AVM\") == \"1\":\n        print(\"✅ RENTCAST_USE_AVM enabled\")\n    else:\n        print(\"ℹ️  RENTCAST_USE_AVM not enabled (will use fallback data)\")\n    \n    print()\n    \n    try:\n        async with httpx.AsyncClient(timeout=30) as client:\n            print(\"🏡 Testing CMA Baseline...\")\n            \n            response = await client.post(f\"{BASE_URL}/cma/baseline\", json={\n                \"subject\": {\n                    \"address\": TEST_ADDRESS,\n                    \"property_type\": \"Single Family\",\n                    \"beds\": 3,\n                    \"baths\": 2.0,\n                    \"sqft\": 1500,\n                    \"year_built\": 2000\n                }\n            })\n            \n            print(f\"Status: {response.status_code}\")\n            \n            if response.status_code == 200:\n                data = response.json()\n                estimate = data.get('estimate')\n                comps_count = len(data.get('comps', []))\n                print(f\"✅ Success!\")\n                print(f\"📊 Estimate: ${estimate:,.0f}\" if estimate else \"No estimate\")\n                print(f\"🏘️  Comparables: {comps_count}\")\n                print(f\"📝 CMA Run ID: {data.get('cma_run_id')}\")\n                if data.get('explanation'):\n                    print(f\"💬 Summary: {data['explanation'][:100]}...\")\n                    \n                # Test some comparables\n                if data.get('comps'):\n                    print(f\"\\n🔍 Sample Comparables:\")\n                    for i, comp in enumerate(data['comps'][:3]):\n                        price = comp.get('raw_price')\n                        beds = comp.get('beds')\n                        baths = comp.get('baths')\n                        sqft = comp.get('living_sqft')\n                        similarity = comp.get('similarity', 0)\n                        print(f\"  {i+1}. ${price:,.0f if price else 0} | {beds}bd/{baths}ba | {sqft:,.0f if sqft else 0}sf | {similarity:.1%} similar\")\n                        \n            else:\n                print(f\"❌ Error: {response.status_code}\")\n                print(f\"Response: {response.text[:500]}\")\n                \n    except Exception as e:\n        print(f\"❌ Exception: {e}\")\n    \n    print(\"\\n🎉 Test Complete!\")\n\nif __name__ == \"__main__\":\n    print(\"🚀 Starting CMA Baseline Test...\")\n    asyncio.run(test_cma_baseline())\n